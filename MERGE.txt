MERGE TWO SORTED ARRAYS WITHOUT EXTRA SPACE

// BRUTE FORCE APPROACH
--> A1[] = 1 4 7 8 10
--> A2[] = 2 3 9
TAKE AN ADDITIONAL ARRAY A3[] = 1 4 7 8 10 2 3 9
THEN SORT A3[] = 1 2 3 4 7 8 10
PUSH BACK TO A1[] AND A2[] 
THIS TAKES TIME COMPLEXITY OF O(NLOGN) + 0(N) + O(N)

// OPTIMAL APPROACH 
--> A1[] = 1 4 7 8 10 --> SORTED
--> A2[] = 2 3 9 --> SORTED
1. COMPARE 1 AND 2 - 1 IS SMALLER SO KEEP IT LIKE THAT
2. COMPARE 4 AND 2 - 2 IS SMALLER SO SWAP 4 AND 2
A1[] = 1 2 7 8 10 --> SORTED
A2[] = 4 3 9 --> UNSORTED SO SORT IT
AFTER SORTING - A2[] = 3 4 9
NOW COMPARE A1[] = 1 2 7 8 10 
            A2[] = 3 4 9
COMPARE 7 AND 3 - 3 IS SMALLER SWAP
A1[] - 1 2 3 8 10 - SORTED
 A2[] = 7 4 9 -- UNSORTED SO SORT IT
 AFTER SORTING - A2[] = 4 7 9
 NOW COMPARE -  1 2 3 8 10
                4 7 9 
COMPARE 8 AND 4 - 4 IS SMALLER SWAP 
A1[] - 1 2 3 4 10
A2[] - 8 7 9 - UNSORTED SO SORT IT
AFTER SORTING - A2[] =  7 8 9
NOW COMPARE - 1 2 3 4 10
               7 8 9
10 IS GREATER SO SWAP 10 AND 7
1 2 3 4 7
10 8 9 - UNSORTED AFTER SORTING - 8 9 10
TIME COMPLEXITY WILL BE O(N+M) -- N FOR TRAVERSING AND M FOR RE-ODERING OF SECOND ARRAY.





